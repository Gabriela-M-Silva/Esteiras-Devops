name: esteira-teste-conexao

on:
  workflow_call:
    inputs:
      project-type:
        required: true
        type: string
      build-configuration:
        required: false
        type: string
        default: Release

jobs:
  build-and-test:
    runs-on: windows-latest
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Configurar MSBuild
        uses: microsoft/setup-msbuild@v2

      - name: Encontrar arquivo .sln
        id: find-sln
        shell: bash
        run: |
          sln_path=$(find . -name "*.sln" | head -n 1)
          echo "sln_path=$sln_path" >> "$GITHUB_OUTPUT"

      - name: Restaurar pacotes NuGet
        run: nuget restore "${{ steps.find-sln.outputs.sln_path }}"

      - name: Compilar solução
        run: msbuild "${{ steps.find-sln.outputs.sln_path }}" /p:Configuration=${{ inputs.build-configuration }}

      - name: Configurar VSTest
        uses: darenm/Setup-VSTest@v1

      - name: Executar testes automatizados
        run: vstest.console.exe **/*Test*.dll --logger:trx

      - name: Análise com SonarQube
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.organization=${{ vars.ORGANIZATION_SONAR }}
            -Dsonar.projectKey=${{ github.event.repository.name }}
            -Dsonar.verbose=true
            -Dsonar.exclusions=**/bin/**/*,**/obj/**/*,**/packages/**/*

      - name: Baixar nuget.exe
        if: ${{ inputs.project-type == 'ClassLibrary' }}
        run: |
          curl -o nuget.exe https://dist.nuget.org/win-x86-commandline/latest/nuget.exe

      - name: Encontrar .csproj
        if: ${{ inputs.project-type == 'ClassLibrary' }}
        id: find-csproj
        shell: bash
        run: |
          csproj_path=$(find . -name '*.csproj' | head -n 1)
          echo "csproj_path=$csproj_path" >> "$GITHUB_OUTPUT"

      - name: Empacotar NuGet
        if: ${{ inputs.project-type == 'ClassLibrary' }}
        shell: pwsh
        run: |
          ./nuget.exe pack ${{ steps.find-csproj.outputs.csproj_path }} `
            -Properties Configuration=${{ inputs.build-configuration }} `
            -OutputDirectory ./nupkg -Build

      - name: Publicar NuGet no GitHub Packages
        if: ${{ inputs.project-type == 'ClassLibrary' }}
        shell: pwsh
        run: |
          ./nuget.exe sources add -Name "github" `
            -Source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json" `
            -Username ${{ github.actor }} -Password ${{ secrets.GITHUB_TOKEN }}

          ./nuget.exe push **/*.nupkg `
            -Source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json" `
            -ApiKey ${{ secrets.GITHUB_TOKEN }} -SkipDuplicate

      - name: Mover artefatos para pasta temporária
        if: ${{ inputs.project-type == 'WindowsFormsApp' }}
        shell: pwsh
        run: |
          mkdir build-output
          Copy-Item -Path "**\bin\${{ inputs.build-configuration }}\*.exe" -Destination build-output -Recurse -Force
          Copy-Item -Path "**\bin\${{ inputs.build-configuration }}\*.dll" -Destination build-output -Recurse -Force

      - name: Upload de artefatos para CD
        if: ${{ inputs.project-type == 'WindowsFormsApp' }}
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: build-output/

  publish:
    if: ${{ inputs.project-type == 'WindowsFormsApp' }}
    runs-on: windows-latest
    needs: build-and-test
    steps:
      - name: Baixar artefatos de build
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: build

      - name: Criar release no GitHub
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ github.run_number }}
          files: build/**/*.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

